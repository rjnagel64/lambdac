
-- Stress-test: big merge sort
-- Note: The ZINC Abstract Machine paper has some interesting benchmarks to consider.

data list (a : *) = {
  nil();
  cons(a, list a)
}

letrec countdown : int -> list int =
  \ (n : int) -> if n == 0 return list int then nil @int else cons @int n (countdown (n - 1));
in

letrec merge : list int -> list int -> list int =
  \ (xs : list int) -> \ (ys : list int) ->
    case xs return list int of {
      nil -> ys;
      cons (x : int) (xs2 : list int) -> case ys return list int of {
        nil -> xs;
        cons (y : int) (ys2 : list int) ->
          if x <= y return list int then
            cons @int x (merge xs2 ys)
          else
            cons @int y (merge xs ys2)
      }
    };
in
letrec splithalf : list int -> list int * list int =
  \ (xs : list int) ->
  letrec go : list int -> list int -> list int * list int =
    \ (slow : list int) -> \ (fast : list int) -> case fast return list int * list int of {
      nil -> (nil @int, slow);
      cons (_ : int) (fast1 : list int) -> case fast1 return list int * list int of {
        nil -> (nil @int, slow);
        cons (_ : int) (fast2 : list int) -> case slow return list int * list int of {
          nil -> (nil @int, slow);
          cons (x : int) (slow1 : list int) ->
            let p : list int * list int = go slow1 fast2 in
              (cons @int x (fst p), snd p)
        }
      }
    };
  in
  go xs xs;
in
letrec mergesort : list int -> list int =
  \ (xs : list int) -> case xs return list int of {
    nil -> xs;
    cons (y : int) (ys : list int) -> case ys return list int of {
      nil -> xs;
      cons (_ : int) (_ : list int) ->
        let p : list int * list int = splithalf xs in
        merge (mergesort (fst p)) (mergesort (snd p))
    }
    };
in
-- Performance: this takes 6.5 seconds
-- GHC on analogous program takes 0.16 seconds (40x faster)
(\ (x : list int) -> ()) (mergesort (countdown 100000))
