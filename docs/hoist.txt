
(( BEGIN Hoist syntax -- too formal? Not formal enough? Unsatisfied. ))
prog ::= closure+; e

closure ::= 'closure' cname envdecl '(' tele  ')' '=' e

envdecl ::= '{' ('@' id)+ ';' (id ':' sort)+ '}'

tele ::= '.' | '@' id ',' tele | id ':' sort ',' tele

sort ::= 'unit' | id


name ::= id | '@.' id

info ::= id | '$@.' id | 'unit_info'

e ::= 'halt' name info | 'let' id ':' sort '=' value 'in' e



lctx ::= '.' | lctx ',' '@' id | lctx ',' id ':' sort
ectx ::= '.'

-- Closure types are existential
ctype ::= '∃' l '.' 'code' '(' l ',' sort+ ')' '×' l
-- Closure context maps closure names to types
cctx ::= '.' | cctx ',' cname : ctype

G - local scope
D - env scope
C - closure environment

---
G; D |- e ok


_ |- _ : _ |- _
(_ :: cctx) |- (_ :: closure) : (_ :: ctype) |- (_ :: cctx)

|- envty ~> D
D |- params ~> G
D; G |- e ok
---
C |- closure (f :: cname) (envty :: envd) (params :: tele) = (e :: term) : ∃l. code (l, s+) × l |- C, ...
(( END Hoist syntax ))



SYNTAX
======

Term variables
variable x, y, f, k

Type variables
variable a, b

Info variables
variable q, r

Record labels
variable l, m

Code pointers
variable #fn

Typing contexts
Γ ::= . | Γ, a : type | Γ, x : t | Γ, x : info t

Signatures
Σ ::= . | Σ, global #fn : forall a+. code(t; S)

Types
t, s ::= unit | t × s | ∃a.t[a] | code(t; S) | {(m : info t)+; (l : s)+}

Telescopes/Parameter lists
S ::= . | forall a, S | t, S | info t, S

Note: Telescopes and parameter lists aren't quite the same thing.
In a dependently-typed setting they are, but here they aren't, because
parameter lists give names to each term variable, but telescopes do not
include parameter names.

Terms
e ::=
  | let x : t = v in e
  | let x : t = y .proj in e
  | unpack <a, x> = e1 in e2
  | case x of (k : s)+
  | f(x, E) -- code pointer invocation
  | #fn[t+] -- wait, what's this again? instantiate pseudo-forall, but isn't that a value?
  | halt s v i

Projections
.proj ::=
  | .fst
  | .snd
  -- probably label projections, too

Argument lists
E ::= . | @t, E | x, E | i, E

Values
v, w ::= x | (v, w) | <t, v> | {(m = i)+; (l = v)+} | inl x | inr x
-- Do inl/inr/pair need info arguments?

Info values
i, j ::= x | $unit_info | $pair_info | $sum_info

Global declarations
global ::= code #fn (x : t; S) = e

Programs
prog ::= global+; e

TODO: In the implementation, Hoist is in ANF. Values only contain variables,
not other values. Most occurrences of values should be restricted to variables,
also.


JUDGMENTS
=========

Γ |- t
Type 't' is well-formed in context 'Γ'

Σ; Γ |- v : t
Value 'v' has type 't' in context 'Γ' and signature 'Σ'

Σ; Γ |- i : info t
Info value 'i' describes type 't' in context 'Γ' and signature 'Σ'

Σ; Γ |- e OK
Expression 'e' is well-typed in context 'Γ' and signature 'Σ'

Γ |- S
Telescope S is well-formed (return extended context?)

Σ; Γ |- E : S
Argument sequence E has type telescope S


RULES
=====

-- TODO: Reorder these sections, so that they actually flow in a natural way.
-- Starting with telescopes definitely doesn't flow. 
-- WF types => Typing for terms => Typing for telescopes/arguments => Typing for info
-- Somewhere, introduce syntactic sugar for closures, construction, and calls
-- TODO: Figure out when/where info terms are required in hoist formalism.
-- In particular, this might let me eventually remove OpaqueArg
-- Hmm. Maybe when calling a closure that has a pseudo-forall?

Like other IRs in the LambdaC compiler, Hoist IR is CPS/ANF-based and
explicitly typed. Its distinctive feature is that closure definitions have been
lifted to become global code declarations, and that allocation of closures and
environments is explicit. Furthermore, there is a syntactic category of "type
info" terms required at certain locations to make garbage collection feasible.

First, the syntax of types. Closure / Function types from previous IRs have
been replaced by the combination of a 'code' type (representing a function
pointer) with an explicit environment pointer and parameter telescope, and
existential packages to bundle a function pointer and environment.

  ---------
  Γ |- unit

  Γ |- t
  Γ |- s
  ----------
  Γ |- t × s

  Γ, @aa |- t
  --------------
  Γ |- ∃aa.t[aa]

  Γ |- t
  Γ |- S
  ---------------
  Γ |- code(t; S)
  
  (Γ |- _)+
  (Γ |- s)+
  --------------------------------
  Γ |- { (m : info t)+; (l : s)+ }

Parameters to a code type are specified using a telescope. A telescope is an
ordered sequence of bindings, where earlier bindings are in scope in later
bindings. Since LambdaC is not dependently-typed, only type parameters are in
scope for subsequent parameters.

  ------
  Γ |- .

  Γ, a |- S
  ----------
  Γ |- @a, S
  
  Γ |- t
  ---------
  Γ |- t, S

Next, we have terms. The typing rules for value allocation, projections, case
analysis are much the same as in previous IRs. Additionally, there are
constructs for packing/unpacking existential types, for allocating groups of
mutually-recursive closures, and for invoking code pointers.

  Σ; Γ |- v : t
  Σ; Γ, x : t |- e OK
  -----------------------------
  Σ; Γ |- let x : t = v in e OK

  Σ; Γ |- y : s
  Γ |- s .proj ~> t
  Σ; Γ, x : t |- e OK
  ---------------------------------
  Σ; Γ |- let x : t = y .proj in e OK

  Σ; Γ |- y : ∃bb.t[bb]
  Σ; Γ, @aa, x : t[aa] |- e OK
  ---------------------------------------
  Σ; Γ |- let <aa, x : t[aa]> = y in e OK

  Γ |- s
  Σ; Γ |- i : info s
  Σ; Γ |- x : s
  ----------------------
  Σ; Γ |- halt @s i x OK

  Σ; Γ |- f : code(t, S)
  Σ; Γ |- x : t
  Σ; Γ |- E : S
  ----------------------
  Σ; Γ |- f(x, E) OK

There are some auxiliary judgments to the term typing rules: 'Γ |- s .proj ~ t'
and 'Σ; Γ |- E : S'. The former states that if a projection '.proj' is applied
to a value of sort 's', the result has sort 't'. The latter states that an
argument list 'E' matches the sorts required by a parameter telescope 'S'.

  -------------
  Σ; Γ |- . : .

  Σ; Γ |- i : info t
  Σ; Γ |- E : S[a := t]
  ---------------------
  Σ; Γ |- i, E : @a, S

  Σ; Γ |- x : t
  Σ; Γ |- E : S
  -------------------
  Σ; Γ |- x, E : t, S

[[Redundant, merge into previous]]
The distinctive feature of CC and Hoist is that functions and closures are not
the same thing. A closure has an environment for non-local names, whereas a
function (code pointer) is entirely closed. Code types consist of a type for
the environment parameter and a telescope of argument types.

  Γ |- t
  Γ |- S
  ---------------
  Γ |- code(t; S)

Aside: It isn't actually necessary to distinguish the environment parameter
from the rest, but eh, whatever. (As of commit fdc1afd, environment parameters
are special only in that they get custom data types generated for them, to
avoid excessive tuple-projecting)

Code pointers can be called by providing a matching environment and an
appropriate list of arguments. Calling a code pointer is therefore uncurried.

  f : code(t; S) ∈ Γ
  Σ; Γ |- env : t
  Σ; Γ |- E : S
  --------------------
  Σ; Γ |- f(env; E) OK

Instead of using code types directly, the translation of types introduces
"closure types", which behave pretty much as you expect: construct with a code
pointer and an environment, eliminate with application to appropriate
arguments.

  CC[(s1, ..., sn) -> !] = closure(s1, ..., sn)

  Γ |- S
  ---------------
  Γ |- closure(S)

  Σ |- #fn : code(t, S)
  Σ; Γ |- env : t
  Σ; Γ, f : closure(S) |- e OK
  ------------------------------------------------
  Σ; Γ |- let f : closure(S) = #fn { env } in e OK

Note: closure allocation is a separate construct from value allocation because
closures can be mutually recursive, but values cannot be.

TODO: Specify allocating multiple closures at once.
TODO: Specify instantiation of polymorphic code

  Σ; Γ |- f : closure(S)
  Σ; Γ |- E : S
  ----------------------
  Σ; Γ |- call f(E) OK

The semantics of closure types, allocations, and calls are given by desugaring
to existential products of an environment and a code pointer:

  closure(S) ::= ∃l.l × code(l; S)

The rules for existential types are entirely standard.

  Γ, a |- t
  ---------
  Γ |- ∃a.t

  Γ |- t
  Σ; Γ |- v : s[a := t]
  ---------------------
  Σ; Γ |- <t, v> : ∃a.s

  Σ; Γ |- e1 : ∃b.t[b]
  Σ; Γ, a, x : t[b := a] |- e2 OK
  -----------------------------------
  Σ; Γ |- unpack <a, x> = e1 in e2 OK

Closure construction involves creating an existential package:

  let cl : closure(S) = f { env } in e
  ::=
  let cl : ∃l.l × code(l; S) = <typeof(env), (env, f)> in e

And calling a closure unpacks the environment and code pointer.

  call cl(arg1, ..., argn)
  ::=
  unpack <a, (env, code)> = cl in code(env; arg1, ..., argn)

Aside: It isn't necessary to use a real product type in this desugaring. The
product could instead be fused with the quantifier, as a sort of "existential
product" type constructor '∃a.a × -' with constructor '<t, e1, e2>' and
analysis 'unpack <a, x, y> = e1 in e2'.


Aside from closure construction and invocation, the other constructs of Hoist
are largely straightforward.

A program halts when it is provided with a final result value, and information
to describe it:

  Γ |- s
  Σ; Γ |- v : s
  Σ; Γ |- i : info s
  ---------------------
  Σ; Γ |- halt s v i OK


In order to construct a closure, we must have a code pointer. In Hoist, all
code is defined at the top-level, using 'global' declarations.

  global #foo[a+] (envp : t; S) = e

If the environment captures type variables, the code is polymorphic. For
example, observe that '#id_inner' will work for any type 't' used to
instantiate 'a'.  When we reference a code pointer, we instantiate its
polymorphic variables, as '#id_inner[int]' in the example below. This
instantiation is only relevant to the type checker, and is erased at runtime.

  global id_inner[a] (envp : {}; x : a, k : closure(a)) = call k(x)
  let f : closure(int, closure(int)) = #id_inner[int] {} in e'

Type-checking a 'global' declaration extends the signature Σ.

  a+ |- t
  a+ |- ... -- how to extract environment fields?
  a+, ... |- S -- How to pass signature to typecheck body?
  Σ; ... |- e OK
  Σ' = Σ, global #fn : code(t, S)
  -------------------------------------------
  Σ |- global #fn[a+] (envp : t; S) = e ~> Σ'

Type-checking a sequence of 'global's threads the signature through in the
obvious manner.

  -----------
  Σ |- ε ~> Σ

  Σ |- global ~> Σ'
  Σ' |- globals ~> Σ''
  ---------------------------
  Σ |- global; globals ~> Σ''


To type-check a program, we type-check each of its global declarations and then
its entry point.

  . |- globals ~> Σ
  Σ; . |- e OK
  -----------------
  |- globals; e OK


REFERENCES
==========

[[See J. Siek "Closure Conversion with Polymorphism"]]

[[See Minamide 1985 "Polymorphic Closure Conversion"]]


Worked Example 1: adder: {{{

let fun adder (x : int, k0 : (int -> int) -> !) =
  let fun inner (y : int, k1 : int -> !) =
    let z : int = x + y in
    k1 z
  in
  k0 inner
in
let cont j0 (f0 : (int, (int) -> !) -> !) =
  let cont j1 (z : int) =
    halt z
  in
  let y : int = 5 in
  f0 y j1
in
let x : int = 3 in
adder x j0
==>
let fun adder {} (x : int, k0 : (int -> int) -> !) =
  let fun inner {x : int} (y : int, k1 : int -> !) =
    let z : int = @.x + y in
    k1 z
  in
  k0 inner
in
let cont j0 {} (f0 : (int, (int) -> !) -> !) =
  let y : int = 5 in
  let cont j1 {} (z : int) =
    halt z
  in
  f0 y j1
in
let x : int = 3 in
adder x j0
==>
-- #inner : code({x : int}, int, closure(int))
global #inner (envp : {x : int}; y : int, k1 : closure(int)) =
  let z : int = envp.x + y in
  call k1(z)

global #adder (envp : {}; x : int, k0 : closure(int, closure(int))) =
  let inner : closure(int, closure(int)) = #inner {x = x} in
  call k0(inner)

global #j1 (envp : {}; z : int) =
  halt z $int64_info

global #j0 (envp : {}; f0 : closure(int, closure(int))) =
  let y : int = 5 in
  let j1 : closure(int) = #j1 {} in
  call f0(y, j1)

let adder : closure(int, closure(int, closure(int))) = #adder {}
let j0 : closure(closure(int, closure(int))) = #j0 {}
let x : int = 3 in
call adder(x, j0)
==> (desugar closures to existentials)
-- #inner : code ({x : int}; int, ∃a.a × code (a; int))
global #inner (envp : {x : int}; y : int, k1 : ∃a.a × code (a; int)) =
  let z : int = envp.x + y in
  -- z : int, a : type, k1_env : ak1_code : code (a, int), |- k1_code(k1_env; z) OK
  unpack <a, (k1_env, k1_code)> = k1 in k1_code(k1_env; z)

global #adder (envp : {}; x : int, k0 : ∃b.b × code(b; int, ∃c.c × code(c; int))) =
  let inner : ∃d.d × code (d; int, ∃e.e × code (e; int)) = <{x : int}, ({x = x}, #inner)> in
  unpack <b, (k0_env, k0_code)> = k0 in k0_code(k0_env; inner)

global #j1 (envp : {}; z : int) =
  halt z $int64_info

global #j0 (envp : {}; f0 : ∃f.f × code(f; int, ∃g.g × code(g; int))) =
  let y : int = 5 in
  let j1 : ∃h.h × code(h; int) = <{}, ({}, #j1)> in
  unpack <f, (f0_env, f0_code)> = f0 in f0_code(f0_env; y, j1)

let adder : ∃i.i × code(i; int, ∃j.j × code(j; int, ∃k.k × code(k; int))) = <{}, ({}, #adder)> in
let j0 : ∃l.l × code(l; ∃m.m × code(m; int, ∃n.n × code(n; int))) = <{}, ({}, #j0)> in
let x : int = 3 in
unpack <i, (adder_env, adder_code)> = adder in adder_code(adder_env; x, j0)

}}}

Worked Example 2: id: {{{

let fun id (@a, k0 : (a, (a) -> !) -> !) =
  let fun inner (x : a, k1 : (a) -> !) =
    k1 x
  in
  k0 inner
in
let cont j0 (id_bool : (bool, (bool) -> !) -> !) =
  let b : bool = true in
  let cont j1 (z : bool) =
    halt @bool z
  in
  id_bool b j1
in
id @bool j0
==>
let fun id {} (@a, k0 : (a, (a) -> !) -> !) =
  let fun inner {@a} (x : a, k1 : (a) -> !) =
    k1 x
  in
  k0 inner
in
let cont j0 {} (id_bool : (bool, (bool) -> !) -> !) =
  let b : bool = true in
  let cont j1 {} (z : bool) =
    halt @bool z
  in
  id_bool b j1
in
id @bool j0
==>
...
==> (desugar closures to existentials)
-- #inner : code({@aa}; aa, ∃a.a × code(a; aa))
-- So this is the part where the "invisible foralls" come in.
-- To be well-scoped, we need a binder for 'aa'.
-- We can't just use the @aa in the environment, because that'll get
-- existentialled out.
-- So, we say that this function is polymorphic, but only for purposes of
-- type-checking. No code is duplicated, no extra arguments are passed.
-- I think that this "pseudo-forall" should be counted as part of 'code', with
-- the usual nullary shorthand.
-- #inner : code[aa]({@aa}; aa, ∃a.a × code(a; aa))
--
-- Nope. The "pseudo-forall" is part of the 'global' declaration. It expresses
-- the fact that '#inner' works for any type 'aa' as long as you provide info
-- for that type, a value of that type, and a closure that accepts a value of
-- that type.
global #inner[aa] (envp : {aa_info : info aa}; x : aa, k1 : ∃a.a × code(a; aa)) =
  unpack <a, (k1_env, k1_code)> = k1 in k1_code(k1_env; x)

-- parameters to 'code()' form a telescope, because they include '@aa' and sorts.
-- #id : code({}; @aa, k0 : ∃b.b × code(b; aa, ∃c.c × code(c; aa)))
global #id (envp : {}; @aa, k0 : ∃b.b × code(b; aa, ∃c.c × code(c; aa))) =
  -- '#inner' is "polymorphic code", so when we reference the global #inner, we
  -- (no-op) instantiate its type variables.
  --
  -- Not quite satisfied with the environment construction here. Should 'aa'
  -- really be a type variable and usable as an info variable? I don't really
  -- think so. ... This might be another case where polymorphic code is used.
  -- Instead of relevant type argument, erased type argument and relevant info.
  let inner : ∃d.d × code(d; aa, ∃e.e × code(e; aa)) = <{aa_info : info aa}, ({aa_info = aa}, #inner[aa])> in
  unpack <b, (k0_env, k0_code)> = k0 in k0_code(k0_env; inner)

-- #j1 : code({}; bool)
global #j1 (envp : {}; z : bool) =
  halt z $bool_info

-- #j0 : code({}; ∃f.f × code(f; bool, ∃g.g × code(g; bool)))
global #j0 (envp : {}; id_bool : ∃f.f × code(f; bool, ∃g.g × code(g; bool))) =
  let b : bool = true in
  let j1 : ∃h.h × code(h, bool) = <{}, ({}, #j1)> in
  unpack <f, (id_bool_env, id_bool_code)> = id_bool in id_bool_code(id_bool_env; b, j1)

let id : ∃i.i × code(i; @aa, ∃j.j × code(j; aa, ∃k.k × code(k; aa))) = <{}, ({}, #id)> in
let j0 : ∃l.l × code(l; ∃m.m × code(m; bool, ∃n.n × code(n; bool))) = <{}, ({}, #j0)> in
unpack <i, (id_env, id_code)> = id in id_code(id_env; $bool_info, j0)

}}}

-- vim: set et sts=2 sw=2:
