letrec merge : list int -> list int -> list int =
  \ (xs : list int) -> \ (ys : list int) ->
    case uncons xs return list int of {
      nil -> ys;
      cons (x : int) (xs2 : list int) -> case uncons ys return list int of {
        nil -> xs;
        cons (y : int) (ys2 : list int) ->
          if x <= y return list int then
            cons x (merge xs2 ys)
          else
            cons y (merge xs ys2)
      }
    };
in
letrec splithalf : list int -> list int * list int =
  \ (xs : list int) ->
  letrec go : list int -> list int -> list int * list int =
    \ (slow : list int) -> \ (fast : list int) -> case uncons fast return list int * list int of {
      nil -> (nil @int, slow);
      cons (_ : int) (fast1 : list int) -> case uncons fast1 return list int * list int of {
        nil -> (nil @int, slow);
        cons (_ : int) (fast2 : list int) -> case uncons slow return list int * list int of {
          nil -> (nil @int, slow);
          cons (x : int) (slow1 : list int) ->
            let p : list int * list int = go slow1 fast2 in
              (cons x (fst p), snd p)
        }
      }
    };
in
go xs xs;
in
letrec mergesort : list int -> list int =
  \ (xs : list int) -> case uncons xs return list int of {
    nil -> xs;
    -- Note: This second case analysis is important for termination.
    -- It gets stuck in an infinite loop of increasing amounts of garbage, otherwise.
    cons (y : int) (ys : list int) -> case uncons ys return list int of {
      nil -> xs;
      cons (_ : int) (_ : list int) ->
        let p : list int * list int = splithalf xs in
        merge (mergesort (fst p)) (mergesort (snd p))
    }
    };
in
let l : list int =
  cons 3 (cons 2 (cons 6 (cons 1 (cons 4 (cons 5 (cons 7 (nil @int)))))))
in
mergesort l
-- splithalf l
