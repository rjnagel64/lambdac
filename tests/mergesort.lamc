data list (a : *) = {
  nil();
  cons(a, %list a)
}
letrec merge : %list int -> %list int -> %list int =
  \ (xs : %list int) -> \ (ys : %list int) ->
    case xs return %list int of {
      nil -> ys;
      cons (x : int) (xs2 : %list int) -> case ys return %list int of {
        nil -> xs;
        cons (y : int) (ys2 : %list int) ->
          if x <= y return %list int then
            cons @int x (merge xs2 ys)
          else
            cons @int y (merge xs ys2)
      }
    };
in
letrec splithalf : %list int -> %list int * %list int =
  \ (xs : %list int) ->
  letrec go : %list int -> %list int -> %list int * %list int =
    \ (slow : %list int) -> \ (fast : %list int) -> case fast return %list int * %list int of {
      nil -> (nil @int, slow);
      cons (_ : int) (fast1 : %list int) -> case fast1 return %list int * %list int of {
        nil -> (nil @int, slow);
        cons (_ : int) (fast2 : %list int) -> case slow return %list int * %list int of {
          nil -> (nil @int, slow);
          cons (x : int) (slow1 : %list int) ->
            let p : %list int * %list int = go slow1 fast2 in
              (cons @int x (fst p), snd p)
        }
      }
    };
in
go xs xs;
in
letrec mergesort : %list int -> %list int =
  \ (xs : %list int) -> case xs return %list int of {
    nil -> xs;
    -- Note: This second case analysis is important for termination.
    -- It gets stuck in an infinite loop of increasing amounts of garbage, otherwise.
    cons (y : int) (ys : %list int) -> case ys return %list int of {
      nil -> xs;
      cons (_ : int) (_ : %list int) ->
        let p : %list int * %list int = splithalf xs in
        merge (mergesort (fst p)) (mergesort (snd p))
    }
    };
in
let l : %list int =
  cons @int 3 (cons @int 2 (cons @int 6 (cons @int 1 (cons @int 4 (cons @int 5 (cons @int 7 (nil @int)))))))
in
mergesort l
-- splithalf l
