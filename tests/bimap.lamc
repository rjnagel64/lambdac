let
  bimap : (int -> int) -> (int -> int) -> (int * int) -> (int * int) =
    \ (f : int -> int) -> \ (g : int -> int) ->
    \ (p : int * int) ->
      (f (fst p), g (snd p))
in
let inc : int -> int = \ (x : int) -> x + 1 in
let dbl : int -> int = \ (x : int) -> x + x in
bimap dbl inc (17, 131)
