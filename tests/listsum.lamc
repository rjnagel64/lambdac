letrec sum : list int -> int =
  \ (xs : list int) -> case uncons xs return int of {
    inl (z : unit) -> 0;
    inr (p : int * list int) -> fst p + sum (snd p)
  };
in
sum (cons 5 (cons 4 (cons 3 (cons 2 (cons 1 (cons 0 (nil @int)))))))
