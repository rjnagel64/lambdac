data list (a : *) = {
  nil();
  cons(a, list a)
}
letrec foldr : forall a. forall b. (a -> b -> b) -> b -> list a -> b =
  \ @a -> \ @b -> \ (f : a -> b -> b) -> \ (z : b) -> \ (xs : list a) ->
  case xs return b of {
    nil -> z;
    cons (y : a) (ys : list a) -> f y (foldr @a @b f z ys)
  };
in
let max : int -> int -> int =
  \ (elem : int) -> \ (acc : int) -> if elem > acc return int then elem else acc
in
foldr @int @int max 0
(cons @int 4 (cons @int 7 (cons @int 2 (cons @int 5 (nil @int)))))
